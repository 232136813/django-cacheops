# -*- coding: utf-8 -*-
"""
Клёвый пакет автоматического и полуавтоматического кэширования queryset-ов с инвалидацией.
Инвалидация работает за счёт разбора условий запроса, которые затем проверяются для
изменяемого/добавляемого/удаляемого объекта и инвалидации в случае удовлетворения.
Вливается в джанго за счёт массовых обезьяних патчей к Manager и QuerySet, поэтому будет
доступен для всех моделей без изменения их кода и будет работать с кастомными менеджерами
и queryset-ами.

CAVEATS:
1. Условия отличные от exact и in, а также все отрицания в смысле инвалидации эквивалентны TRUE.
   Т.о. для выборок с такими условиями инвалидация будет избыточной.
2. Условия на приджойненые модели игнорируются, что с одной стороны приводит
   к избыточной инвалидации, а с другой инвалидация не вызывается при изменении
   связанных моделей.
3. Изменение приджойненого объекта не приводит к инвалидации.
4. Массовые апдейты не приводят к инвалидации.
5. ORDER BY и LIMIT/OFFSET никак не влияют на инвалидацию.
6. Не работает для RawQuerySet.
7. Условия в подзапросах не влияют на инвалидацию, что может приводить как
   к избыточной, так и к недостаточной инвалидации.
8. Осторожней с get_or_create().
9. Аггрегаты (кроме count) не кэшируются, аннотации скорее всего будут работать и кэшироваться.
10. Таймайт кеширования для queryset-а не может превышать таймайт для модели,
    заданный в настройках.

В остальном работает хорошо.

В рамках текущей модели:
Реализация 1 и 2 сложна и приведёт к удорожанию инвалидации и заметному увеличению количества служебной инфы.
6 это ещё тот вопрос, как инвалидировать?
9, 10 можно реализовать если понадобиться.
5 можно как-то доработать для более тонкой инвалидации.
Реализация 3 возможна если очень очень надо, также здорово усложнит инвалидацию.
4 можно постаравшись реализовать, но скорее всего получим не то, что хотим - апдейт с уловием перпендикулярным
условиям большинству выборок, по идее должен их все инвалидировать, но на деле тут возможно мы хотим оставить
грязный кеш.
"""
from .simple import *
from .query import *
from .invalidation import *

install_cacheops()
